实战场景1:
涉及多分支的项目，其它组修改本组的代码并不会运行本组的java pipeline
导致本组的Master Branch分支不会运行SonarQube的代码验证，SonarQube对应的项目不会报错
导致本组分支在刷新获取到变更之后，会看到SonarQube检查到的代码质量问题

实战场景2:
使用没有分支状态的版本控制系统(Perforce)，当提交变更之后由于没有办法运行Pipeline
导致无法验证修改的模块的单元测试是否全部都通过，从而在系统中引入新的潜在错误
(本地开发时应该验证当前模块的相关测试是否能够全部通过，之后再merge)